ржирж┐ржЪрзЗ рждрзЛржорж╛рж░ ржжрзЗржУрзЯрж╛ ржХрзЛржбржЯрж┐ рж▓рж╛ржЗржирзЗ рж▓рж╛ржЗржирзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж▓рж╛ржо ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛рзЯ тАФ ржХрзЗржи рж▓рж┐ржЦрж╛ рж╣рзЯрзЗржЫрзЗ, ржХрзА ржХрж░рзЗ, ржЖрж░ ржПржЗржнрж╛ржмрзЗ ржХрзЗржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ тАФ рж╕ржм ржХрж┐ржЫрзБ рж╕рзНржкрж╖рзНржЯ ржУ ржмрж┐рж╕рзНрждрж╛рж░рж┐рждржнрж╛ржмрзЗ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗржЫрж┐:

ЁЯУж import util
python
Copy
Edit
import util
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

util.py ржлрж╛ржЗрж▓ржЯрж┐ рж╣ржЪрзНржЫрзЗ ржПржХржЯрж┐ рж╕рж╣рж╛рзЯржХ ржлрж╛ржЗрж▓, ржпрзЗржЯрж╛ Pacman AI ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржжрзЗржУрзЯрж╛ ржерж╛ржХрзЗред

ржПрж░ ржоржзрзНржпрзЗ Stack, Queue, ржПржмржВ PriorityQueue ржХрзНрж▓рж╛рж╕ ржЖржЫрзЗ, ржпрзЗржЧрзБрж▓рзЛ рждрзЛржорж╛рж░ DFS, BFS, UCS, A* ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рждрзЗ рж▓рж╛ржЧржмрзЗред

ЁЯФз class SearchProblem:
python
Copy
Edit
class SearchProblem:
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЯрж╛ ржПржХржЯрж╛ ржЕрзНржпрж╛ржмрж╕рзНржЯрзНрж░рж╛ржХрзНржЯ ржХрзНрж▓рж╛рж╕ (interface/blueprint)ред рждрзБржорж┐ рж╕рж░рж╛рж╕рж░рж┐ ржПржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ ржирж╛ред

ржПрж░ child class ржмрж╛ instance ржкрж╛ржмрзЗ ржпржЦржи Pacman maze environment ржЪрж▓ржмрзЗред

ржПрж░ ржХрж╛ржЬ рж╣ржЪрзНржЫрзЗ Search Problem ржХрзЗ define ржХрж░рж╛ред

ЁЯУН Start State Function
python
Copy
Edit
def getStartState(self):
    util.raiseNotDefined()
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ рж╢рзБрж░рзБ ржкрзЯрзЗржирзНржЯ (Pacman-ржПрж░ рж╢рзБрж░рзБ ржЕржмрж╕рзНржерж╛ржи) рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

util.raiseNotDefined() рж╣ржЪрзНржЫрзЗ placeholder тЖТ ржПржЦржирзЛ ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рж╛ рж╣рзЯржирж┐ ржмрж▓рзЗ error ржжрж┐ржмрзЗред

ЁЯОп Goal State Checker
python
Copy
Edit
def isGoalState(self, state):
    util.raiseNotDefined()
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЗ ржлрж╛ржВрж╢ржи ржЪрзЗржХ ржХрж░рзЗ ржпрзЗ state-ржЯрж╛ ржХрж┐ ржЧржирзНрждржмрзНржп (goal) ржХрж┐ржирж╛ред

ржпржжрж┐ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ True рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

ЁЯФА Successor Function
python
Copy
Edit
def getSuccessors(self, state):
    util.raiseNotDefined()
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЯрж╛ state ржПрж░ рж╕ржм рж╕ржорзНржнрж╛ржмрзНржп ржкрж░ржмрж░рзНрждрзА рж╕рзНржЯрзЗржЯ (рж╕ржирзНрждрж╛ржи ржирзЛржб) рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗред

ржлрж░ржорзНржпрж╛ржЯ: [(successor, action, cost), ...]

ЁЯТ░ Cost Calculation Function
python
Copy
Edit
def getCostOfActions(self, actions):
    util.raiseNotDefined()
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржХрзЛржирзЛ action рж▓рж┐рж╕рзНржЯ (ржпрзЗржоржи ['South', 'South', 'West']) ржжрж┐рж▓рзЗ, рждрж╛рж░ ржорзЛржЯ cost рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред

ЁЯОо tinyMazeSearch
python
Copy
Edit
def tinyMazeSearch(problem):
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return [s, s, w, s, w, w, s, w]
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЯрж╛ ржорзНржпрж╛ржирзБрзЯрж╛рж▓рж┐ рж▓рзЗржЦрж╛ ржПржХржЯрж╛ рж╕рж▓рж┐ржЙрж╢ржи tinyMaze-ржПрж░ ржЬржирзНржпред

ржорж╛ржирзЗ Pacman-ржХрзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржЧржирзНрждржмрзНржпрзЗ ржирж┐рждрзЗ South, West ржирж┐рж░рзНржжрзЗрж╢ ржжрзЗржУрзЯрж╛ рж╣рзЯрзЗржЫрзЗред

ржПржЯрж╛ testing purpose-ржП ржжрзЗржУрзЯрж╛ рж╣рзЯред

ЁЯФН Depth-First Search (DFS)
python
Copy
Edit
def depthFirstSearch(problem):
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЯрж┐ DFS algorithm ржЗржоржкрзНрж▓рж┐ржорзЗржирзНржЯ ржХрж░рзЗред

ржПржЯрж┐ ржПржХржЯрж┐ uninformed search тЖТ ржХрзЛржирзЛ heuristic ржмрж╛ cost ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржирж╛ред

ЁЯОп Get Start Node
python
Copy
Edit
startingNode = problem.getStartState()
if problem.isGoalState(startingNode):
    return []
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

getStartState() ржерзЗржХрзЗ рж╢рзБрж░рзБ рж╕рзНржЯрзЗржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛ржЪрзНржЫрзЗред

ржпржжрж┐ рж╢рзБрж░рзБрждрзЗржЗ ржЧржирзНрждржмрзНржпрзЗ ржерж╛ржХрзЗ рждрж╛рж╣рж▓рзЗ ржЦрж╛рж▓рж┐ рж▓рж┐рж╕рзНржЯ ([]) ржлрзЗрж░ржд ржжрж┐ржЪрзНржЫрзЗ (ржорж╛ржирзЗ ржХрзЛржирзЛ ржкржжржХрзНрж╖рзЗржк ржжрж░ржХрж╛рж░ ржирзЗржЗ)ред

ЁЯз▒ Stack & Visited List
python
Copy
Edit
dfsstack = util.Stack()
visitedNodes = []
dfsstack.push((startingNode, []))
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

DFS ржПрж░ ржЬржирзНржп Stack ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯ ржХрж╛рж░ржг ржПржЯрж╛ LIFO (Last In First Out) рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░ред

visitedNodes рж▓рж┐рж╕рзНржЯрзЗ ржЖржорж░рж╛ ржпрзЗрж╕ржм ржирзЛржб ржнрж┐ржЬрж┐ржЯ ржХрж░рзЗржЫрж┐ рждрж╛ рж░рж╛ржЦрж┐, ржпрзЗржи рж▓рзБржкрзЗ ржирж╛ ржкрзЬрж┐ред

Stack-ржП ржкрзНрж░ржержорзЗ (state, actions_list) tuple ржкрзБрж╢ ржХрж░рж╛ рж╣рзЯред

ЁЯФД Main Loop
python
Copy
Edit
while not dfsstack.isEmpty():
    currentNode, actions = dfsstack.pop()
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржпрждржХрзНрж╖ржг Stack ржлрж╛ржБржХрж╛ ржирж╛ рж╣рзЯ, рждрждржХрзНрж╖ржг рж▓рзБржк ржЪрж╛рж▓ржмрзЗред

Stack ржерзЗржХрзЗ ржПржХ ржПржХ ржХрж░рзЗ state ржмрзЗрж░ ржХрж░рзЗ ржПржирзЗ ржЪрзЗржХ ржХрж░рж╛ рж╣ржмрзЗред

тЬЕ Visit Node & Goal Check
python
Copy
Edit
if currentNode not in visitedNodes:
    visitedNodes.append(currentNode)
    if problem.isGoalState(currentNode):
        return actions
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржпржжрж┐ ржмрж░рзНрждржорж╛ржи рж╕рзНржЯрзЗржЯ ржЖржЧрзЗрж░ ржорждрзЛ ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ visited рж▓рж┐рж╕рзНржЯрзЗ рж░рж╛ржЦрж┐ред

ржпржжрж┐ ржЧржирзНрждржмрзНржпрзЗ ржкрзМржБржЫрзЗ ржпрж╛ржЗ, рждрж╛рж╣рж▓рзЗ ржПржЦржи ржкрж░рзНржпржирзНржд ржХрж░рж╛ actions рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж┐ред

ЁЯзн Expand Child Nodes
python
Copy
Edit
for nextNode, action, cost in problem.getSuccessors(currentNode):
    nwAction = actions + [action]
    dfsstack.push((nextNode, nwAction))
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржмрж░рзНрждржорж╛ржи рж╕рзНржЯрзЗржЯ ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ successor ржЧрзБрж▓рзЛрж░ ржЬржирзНржп ржирждрзБржи ржЕрзНржпрж╛ржХрж╢ржи рж▓рж┐рж╕рзНржЯ ржмрж╛ржирж╛ржЗред

Stack-ржП push ржХрж░рж┐ ржпрж╛рждрзЗ ржкрж░рзЗрж░ ржмрж╛рж░ рж╕рзЗ ржирзЛржб ржШрзБрж░рзЗ ржжрзЗржЦрж╛ рж╣рзЯред

ЁЯМР Breadth-First Search (BFS)
python
Copy
Edit
def breadthFirstSearch(problem):
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

ржПржЯрж╛ BFS algorithm тЖТ Queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗред

DFS-ржПрж░ ржорждрзЛржЗ, ржХрж┐ржирзНрждрзБ Stack-ржПрж░ ржЬрж╛рзЯржЧрж╛рзЯ Queueред

ЁЯФД BFS Logic (Same as DFS, but FIFO)
python
Copy
Edit
bfsQueue = util.Queue()
visitedNodes = []
bfsQueue.push((startingNode, []))
ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:

Queue ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рзЯ ржкрзНрж░ржержорзЗ ржЖрж╕рж╛ рж╕рзНржЯрзЗржЯ ржЖржЧрзЗ ржкрзНрж░рж╕рзЗрж╕ рж╣рзЯред

FIFO (First In First Out) structure тЖТ level wise traversal рж╣рзЯред

